{"ast":null,"code":"import { takeLatest, all, call, put } from 'redux-saga/effects';\nimport { fetchQuoteSuccess, fetchQuoteFailed, postQuoteSuccess, postQuoteFailed } from './quotes.actions';\nimport { QUOTES_ACTION_TYPES } from './quotes.types';\nimport axios from 'axios';\nimport { baseUrl } from '../urls';\nconst url = `${baseUrl}/quotes`;\nconst getQuote = async () => {\n  const response = await fetch(url);\n  const json = await response.json();\n  localStorage.setItem('quote', json.text);\n  return await json;\n};\nexport function* fetchQuoteAsync() {\n  try {\n    const quotesArray = yield call(getQuote, 'Quotes');\n    yield put(fetchQuoteSuccess(quotesArray));\n  } catch (error) {\n    yield put(fetchQuoteFailed(error));\n  }\n}\nexport function* onFetchQuote() {\n  yield takeLatest(QUOTES_ACTION_TYPES.FETCH_QUOTE_START, fetchQuoteAsync);\n}\nconst saveQuote = async payload => {\n  axios.post(url, payload.quote, {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${payload.token}`\n    }\n  });\n};\nexport function saveQuoteAsync(_ref) {\n  let {\n    payload\n  } = _ref;\n  return function* () {\n    try {\n      const quoteSaved = yield call(saveQuote, payload);\n      yield put(postQuoteSuccess(quoteSaved));\n    } catch (error) {\n      yield put(postQuoteFailed(error));\n    }\n  }();\n}\nexport function* onPostQuote() {\n  yield takeLatest(QUOTES_ACTION_TYPES.POST_QUOTE_START, saveQuoteAsync);\n}\nexport function* quotesSaga() {\n  yield all([call(onFetchQuote), call(onPostQuote)]);\n}","map":{"version":3,"names":["takeLatest","all","call","put","fetchQuoteSuccess","fetchQuoteFailed","postQuoteSuccess","postQuoteFailed","QUOTES_ACTION_TYPES","axios","baseUrl","url","getQuote","response","fetch","json","localStorage","setItem","text","fetchQuoteAsync","quotesArray","error","onFetchQuote","FETCH_QUOTE_START","saveQuote","payload","post","quote","headers","token","saveQuoteAsync","quoteSaved","onPostQuote","POST_QUOTE_START","quotesSaga"],"sources":["/Users/sanjamandic/Desktop/react/portfolioReact/src/redux/quotes/quotes.saga.js"],"sourcesContent":["import {\n  takeLatest, all, call, put,\n} from 'redux-saga/effects';\nimport { \n  fetchQuoteSuccess,\n  fetchQuoteFailed,\n  postQuoteSuccess,\n  postQuoteFailed,\n} from './quotes.actions';\nimport { QUOTES_ACTION_TYPES } from './quotes.types';\nimport axios from 'axios';\nimport { baseUrl } from '../urls';\n\nconst url = `${baseUrl}/quotes`\n\nconst getQuote = async() => {\n  const response = await fetch(url);\n  const json = await response.json()\n  localStorage.setItem('quote', json.text);\n  return await json;\n}\nexport function* fetchQuoteAsync() {\n  try {\n    const quotesArray = yield call(getQuote, 'Quotes');\n    yield put(fetchQuoteSuccess(quotesArray));\n  } catch (error) {\n    yield put(fetchQuoteFailed(error));\n  }\n}\n\nexport function* onFetchQuote() {\n  yield takeLatest(QUOTES_ACTION_TYPES.FETCH_QUOTE_START, fetchQuoteAsync);\n}\n\nconst saveQuote = async (payload) => {\n  axios.post(url, payload.quote,\n      { headers: {'Content-Type': 'application/json', 'Authorization': `Bearer ${payload.token}`}},\n    );\n}\n\nexport function* saveQuoteAsync({payload}) {\n  try {\n    const quoteSaved = yield call(saveQuote, payload);\n    yield put(postQuoteSuccess(quoteSaved));\n  } catch (error) {\n    yield put(postQuoteFailed(error));\n  }\n}\n\nexport function* onPostQuote() {\n  yield takeLatest(QUOTES_ACTION_TYPES.POST_QUOTE_START, saveQuoteAsync);\n}\n\nexport function* quotesSaga() {\n  yield all([call(onFetchQuote), call(onPostQuote)]);\n}\n"],"mappings":"AAAA,SACEA,UAAU,EAAEC,GAAG,EAAEC,IAAI,EAAEC,GAAG,QACrB,oBAAoB;AAC3B,SACEC,iBAAiB,EACjBC,gBAAgB,EAChBC,gBAAgB,EAChBC,eAAe,QACV,kBAAkB;AACzB,SAASC,mBAAmB,QAAQ,gBAAgB;AACpD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,SAAS;AAEjC,MAAMC,GAAG,GAAI,GAAED,OAAQ,SAAQ;AAE/B,MAAME,QAAQ,GAAG,YAAW;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC;EACjC,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAI,EAAE;EAClCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,IAAI,CAACG,IAAI,CAAC;EACxC,OAAO,MAAMH,IAAI;AACnB,CAAC;AACD,OAAO,UAAUI,eAAe,GAAG;EACjC,IAAI;IACF,MAAMC,WAAW,GAAG,MAAMlB,IAAI,CAACU,QAAQ,EAAE,QAAQ,CAAC;IAClD,MAAMT,GAAG,CAACC,iBAAiB,CAACgB,WAAW,CAAC,CAAC;EAC3C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMlB,GAAG,CAACE,gBAAgB,CAACgB,KAAK,CAAC,CAAC;EACpC;AACF;AAEA,OAAO,UAAUC,YAAY,GAAG;EAC9B,MAAMtB,UAAU,CAACQ,mBAAmB,CAACe,iBAAiB,EAAEJ,eAAe,CAAC;AAC1E;AAEA,MAAMK,SAAS,GAAG,MAAOC,OAAO,IAAK;EACnChB,KAAK,CAACiB,IAAI,CAACf,GAAG,EAAEc,OAAO,CAACE,KAAK,EACzB;IAAEC,OAAO,EAAE;MAAC,cAAc,EAAE,kBAAkB;MAAE,eAAe,EAAG,UAASH,OAAO,CAACI,KAAM;IAAC;EAAC,CAAC,CAC7F;AACL,CAAC;AAED,OAAO,SAAUC,cAAc;EAAA,IAAC;IAACL;EAAO,CAAC;EAAA,oBAAE;IACzC,IAAI;MACF,MAAMM,UAAU,GAAG,MAAM7B,IAAI,CAACsB,SAAS,EAAEC,OAAO,CAAC;MACjD,MAAMtB,GAAG,CAACG,gBAAgB,CAACyB,UAAU,CAAC,CAAC;IACzC,CAAC,CAAC,OAAOV,KAAK,EAAE;MACd,MAAMlB,GAAG,CAACI,eAAe,CAACc,KAAK,CAAC,CAAC;IACnC;EACF,CAAC;AAAA;AAED,OAAO,UAAUW,WAAW,GAAG;EAC7B,MAAMhC,UAAU,CAACQ,mBAAmB,CAACyB,gBAAgB,EAAEH,cAAc,CAAC;AACxE;AAEA,OAAO,UAAUI,UAAU,GAAG;EAC5B,MAAMjC,GAAG,CAAC,CAACC,IAAI,CAACoB,YAAY,CAAC,EAAEpB,IAAI,CAAC8B,WAAW,CAAC,CAAC,CAAC;AACpD"},"metadata":{},"sourceType":"module","externalDependencies":[]}