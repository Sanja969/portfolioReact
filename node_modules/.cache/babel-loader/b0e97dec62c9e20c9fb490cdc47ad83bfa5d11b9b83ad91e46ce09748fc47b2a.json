{"ast":null,"code":"/* eslint-disable import/prefer-default-export */\nimport { BLOGS_ACTION_TYPES } from './blogs.types';\nexport const fetchBlogsStart = () => ({\n  type: BLOGS_ACTION_TYPES.FETCH_BLOGS_START\n});\nexport const fetchBlogsSuccess = blogs => ({\n  type: BLOGS_ACTION_TYPES.FETCH_BLOGS_SUCCESS,\n  payload: blogs\n});\nexport const fetchBlogsFailed = error => ({\n  type: BLOGS_ACTION_TYPES.FETCH_BLOGS_FAILED,\n  payload: error\n});\nexport const postBlogStart = (blog, token) => ({\n  type: BLOGS_ACTION_TYPES.POST_BLOG_START,\n  payload: {\n    blog,\n    token\n  }\n});\nexport const postBlogSuccess = (blog, token) => ({\n  type: BLOGS_ACTION_TYPES.POST_BLOG_SUCCESS,\n  payload: {\n    blog,\n    token\n  }\n});\nexport const postBlogFailed = error => ({\n  type: BLOGS_ACTION_TYPES.POST_BLOG_FAILED,\n  payload: error\n});\nexport const deleteBlogStart = id => ({\n  type: BLOGS_ACTION_TYPES.DELETE_BLOG_START,\n  payload: id\n});\nexport const deleteBlogSuccess = id => ({\n  type: BLOGS_ACTION_TYPES.DELETE_BLOG_SUCCESS,\n  payload: id\n});\nexport const deleteBlogFailed = error => ({\n  type: BLOGS_ACTION_TYPES.DELETE_BLOG_FAILED,\n  payload: error\n});","map":{"version":3,"names":["BLOGS_ACTION_TYPES","fetchBlogsStart","type","FETCH_BLOGS_START","fetchBlogsSuccess","blogs","FETCH_BLOGS_SUCCESS","payload","fetchBlogsFailed","error","FETCH_BLOGS_FAILED","postBlogStart","blog","token","POST_BLOG_START","postBlogSuccess","POST_BLOG_SUCCESS","postBlogFailed","POST_BLOG_FAILED","deleteBlogStart","id","DELETE_BLOG_START","deleteBlogSuccess","DELETE_BLOG_SUCCESS","deleteBlogFailed","DELETE_BLOG_FAILED"],"sources":["/Users/sanjamandic/Desktop/react/portfolioReact/src/redux/blogs/blogs.actions.js"],"sourcesContent":["/* eslint-disable import/prefer-default-export */\nimport { BLOGS_ACTION_TYPES } from './blogs.types';\n\nexport const fetchBlogsStart = () => (\n  {\n  type: BLOGS_ACTION_TYPES.FETCH_BLOGS_START,\n})\n\nexport const fetchBlogsSuccess = (blogs) => ({\n  type: BLOGS_ACTION_TYPES.FETCH_BLOGS_SUCCESS,\n  payload: blogs,\n})\n\nexport const fetchBlogsFailed = (error) => ({\n  type: BLOGS_ACTION_TYPES.FETCH_BLOGS_FAILED,\n  payload: error,\n})\n\nexport const postBlogStart = (blog, token) => (\n  {\n  type: BLOGS_ACTION_TYPES.POST_BLOG_START,\n  payload: {\n    blog,\n    token,\n  },\n})\n\nexport const postBlogSuccess = (blog, token) =>( {\n  type: BLOGS_ACTION_TYPES.POST_BLOG_SUCCESS,\n  payload: {\n    blog,\n    token,\n  },\n})\n\nexport const postBlogFailed = (error) => ({\n  type: BLOGS_ACTION_TYPES.POST_BLOG_FAILED,\n  payload: error,\n})\n\nexport const deleteBlogStart = (id) => (\n  {\n  type: BLOGS_ACTION_TYPES.DELETE_BLOG_START,\n  payload: id,\n})\n\nexport const deleteBlogSuccess = (id) =>( {\n  type: BLOGS_ACTION_TYPES.DELETE_BLOG_SUCCESS,\n  payload: id,\n})\n\nexport const deleteBlogFailed = (error) => ({\n  type: BLOGS_ACTION_TYPES.DELETE_BLOG_FAILED,\n  payload: error,\n})"],"mappings":"AAAA;AACA,SAASA,kBAAkB,QAAQ,eAAe;AAElD,OAAO,MAAMC,eAAe,GAAG,OAC7B;EACAC,IAAI,EAAEF,kBAAkB,CAACG;AAC3B,CAAC,CAAC;AAEF,OAAO,MAAMC,iBAAiB,GAAIC,KAAK,KAAM;EAC3CH,IAAI,EAAEF,kBAAkB,CAACM,mBAAmB;EAC5CC,OAAO,EAAEF;AACX,CAAC,CAAC;AAEF,OAAO,MAAMG,gBAAgB,GAAIC,KAAK,KAAM;EAC1CP,IAAI,EAAEF,kBAAkB,CAACU,kBAAkB;EAC3CH,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,OAAO,MAAME,aAAa,GAAG,CAACC,IAAI,EAAEC,KAAK,MACvC;EACAX,IAAI,EAAEF,kBAAkB,CAACc,eAAe;EACxCP,OAAO,EAAE;IACPK,IAAI;IACJC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAME,eAAe,GAAG,CAACH,IAAI,EAAEC,KAAK,MAAM;EAC/CX,IAAI,EAAEF,kBAAkB,CAACgB,iBAAiB;EAC1CT,OAAO,EAAE;IACPK,IAAI;IACJC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMI,cAAc,GAAIR,KAAK,KAAM;EACxCP,IAAI,EAAEF,kBAAkB,CAACkB,gBAAgB;EACzCX,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMU,eAAe,GAAIC,EAAE,KAChC;EACAlB,IAAI,EAAEF,kBAAkB,CAACqB,iBAAiB;EAC1Cd,OAAO,EAAEa;AACX,CAAC,CAAC;AAEF,OAAO,MAAME,iBAAiB,GAAIF,EAAE,KAAM;EACxClB,IAAI,EAAEF,kBAAkB,CAACuB,mBAAmB;EAC5ChB,OAAO,EAAEa;AACX,CAAC,CAAC;AAEF,OAAO,MAAMI,gBAAgB,GAAIf,KAAK,KAAM;EAC1CP,IAAI,EAAEF,kBAAkB,CAACyB,kBAAkB;EAC3ClB,OAAO,EAAEE;AACX,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}